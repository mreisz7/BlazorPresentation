@page "/"

<div @ref=@SlideContainerRef 
     tabindex="0" 
     @onkeydown=@HandleKeyDown 
     @ontouchstart=@HandleTouchStart 
     @ontouchmove=@HandleTouchMove 
     @onmousewheel=@HandleMouseWheel
>
    @for (int i = 0; i < Slides.Count; i++)
    {
        Type? slideType = Type.GetType($"BlazorPresentation.Slides.{Slides[i]}");
        if (slideType is not null)
        {
            <SlideFrame SlideIndex=@i CurrentSlideIndex=@CurrentSlide>
                <DynamicComponent Type=@slideType />
            </SlideFrame>
        }
    }
</div>

<footer>
    <span>@($"{CurrentSlide + 1} / {Slides.Count}")</span>
</footer>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SlideContainerRef.FocusAsync();
        }
    }

    public List<string> Slides { get; set; } = new()
    {
        // Title
        "TitlePage",
        // What's Wrong With JavaScript
        "SectionTitleJavascript",
        "JS_Thesis",
        "JS_ABriefHistory",
        "JS_BrowserWar",
        "JS_BrendanEichQuote",
        "JS_Evolution",
        "JS_Language_Features",
        "JS_Dynamic_Weak",
        "JS_Type_Coercion",
        "JS_Numbers",
        "JS_Callback_Hell",
        "JS_Typescript",
        "JS_2009",
        "JS_IO",
        "JS_2011",
        "JS_Isaac_Schlueter_Quote",
        "JS_Leftpad_1",
        "JS_Leftpad_2",
        "JS_Should",
        "JS_Project_Sizes",
        "JS_Language_Features_Critique",
        "JS_Node_Modules",
        "JS_HiTrust",
        "JS_JeffAtwood",
        "JS_JeffGoldblum",


        // Blazor
        "SectionTitleBlazor",
        // Live Coding
        "SectionTitleLiveCoding",
        // Milliman Design System
        "SectionTitleMDS",
        "MDS_WhatIsMDS",
        "MDS_BCL",
        "MDS_DesignGoals",
        "MDS_WhoCanUseIt",
        "MDS_UsingMDSLibrary",
        "MDS_Contributing",
        "Questions",
        "BlazorResources",
        "ContactUs"
    };

    public int CurrentSlide = 0;

    private ElementReference SlideContainerRef;

    private double? xTouchStart = null;
    private double? yTouchStart = null;

    private void IncrementSlides()
    {
        if (CurrentSlide + 1 < Slides.Count)
        {
            CurrentSlide++;
        }
    }

    private void DecrementSlides()
    {
        if (CurrentSlide > 0)
        {
            CurrentSlide--;
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "KeyH")
        {
            CurrentSlide = 0;
        }
        if (e.Code == "ArrowRight" || e.Code == "ArrowDown" || e.Code == "Space" || e.Code == "Enter")
        {
            IncrementSlides();
        }
        if (e.Code == "ArrowLeft" || e.Code == "ArrowUp")
        {
            DecrementSlides();
        }
    }

    private void HandleTouchStart(TouchEventArgs e)
    {
        xTouchStart = e.Touches[0].ClientX;
        yTouchStart = e.Touches[0].ClientY;
    }

    private void HandleTouchMove(TouchEventArgs e)
    {
        if (xTouchStart is not null && yTouchStart is not null)
        {
            double xTouchMove = e.Touches[0].ClientX;
            double yTouchMove = e.Touches[0].ClientY;

            double xTouchDiff = (double)xTouchStart - xTouchMove;
            double yTouchDiff = (double)yTouchStart - yTouchMove;

            if (Math.Abs(xTouchDiff) > Math.Abs(yTouchDiff))
            {
                if (xTouchDiff > 0)
                {
                    // Right Swipe triggered
                    IncrementSlides();
                } else
                {
                    // Left Swipe triggered
                    DecrementSlides();
                }
            } else
            {
                if (yTouchDiff > 0)
                {
                    // Down Swipe triggered
                    Console.WriteLine("Down Swipe");
                } else
                {
                    // Up Swipe triggered
                    Console.WriteLine("Up Swipe");
                }
            }
        }
        xTouchStart = null;
        yTouchStart = null;
    }

    private void HandleMouseWheel(WheelEventArgs e)
    {
        if (e.DeltaY > 0)
        {
            IncrementSlides();
        }
        if (e.DeltaY < 0)
        {
            DecrementSlides();
        }
    }
}
